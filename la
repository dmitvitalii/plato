#!/usr/bin/env python3
#
# Copyright 2019 Vitalii Dmitriev
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import os
from subprocess import call
from os import listdir
from os.path import abspath, basename, dirname, isfile, join
import multiprocessing

VERSION = '0.1.5'
ADB = 'adb'


def get_device_path(out_dir_path):
    return "/%s" % out_dir_path.split(os.environ['ANDROID_PRODUCT_OUT'])[-1]


def find_file(abs_path):
    path = dirname(abs_path)
    name = basename(abs_path)
    files = [file for file in listdir(path) if isfile(join(path, file)) and file.startswith(name)]

    if len(files):
        return files[0]
    else:
        raise FileNotFoundError()


def push_file(args):
    """TODO: check whether the adb installed before call!"""
    abs_path = abspath(args.file)
    if args.dir:
        data = dirname(abs_path)
    else:
        data = find_file(args.file)
    call([ADB, 'push', data, get_device_path(abs_path)])


def remount_as_root(args):
    call([ADB, 'root'])
    call([ADB, 'remount'])


def make(args):
    jobs = args.jobs if args.jobs else multiprocessing.cpu_count() + 1
    if args.lunch:
        print(['source', 'build/envsetup.sh'])
        print(['lunch', args.lunch])
    if args.app:
        print(['mma', args.app, '-j', jobs])
    else:
        print(['make', '-j', jobs])


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    make_parser = subparsers.add_parser('make', help='Build a firmware or an application')
    make_parser.add_argument('-l', '--lunch', help='If specified, init a new environment for a specific built type. Can be either a number or a name')
    make_parser.add_argument('--app', help='Build an app instead of a firmware. Specify a project name (can be found in a manifest file)')
    make_parser.add_argument('-j', '--jobs', type=int, help='''Specify a number of tasks. See make -j.
    If not specified, uses a number of cores + 1 by default''')
    make_parser.set_defaults(function=make)

    subparsers.add_parser('rr', help='adb root && adb remount').set_defaults(function=remount_as_root)
    subparsers.add_parser('root', help='Same as rr').set_defaults(function=remount_as_root)

    push_parser = subparsers.add_parser('push', help='''Push a file to the device.
    The filename can be provider either with an extension, or without.
    If several files were found, will push the first one''')
    push_parser.add_argument('file', help='Name or path of an apk file')
    push_parser.add_argument('-d', '--dir', action='store_true', help='Push the whole directory')
    push_parser.set_defaults(function=push_file)

    args = parser.parse_args()
    args.function(args)


if __name__ == "__main__":
    sys.exit(main())
