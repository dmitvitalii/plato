#!/usr/bin/env python3
#
# Copyright 2019 Vitalii Dmitriev
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import os
from subprocess import call
from os.path import abspath, basename, splitext, dirname

VERSION = '0.1.4'
APK_EXT = '.apk'
ADB = 'adb'


def get_device_path(out_dir_path):
    return "/%s" % out_dir_path.split(os.environ['ANDROID_PRODUCT_OUT'])[-1]


def push_apk(args):
    """TODO: check whether the adb installed before call!"""
    apk = args.apk
    abs_path = abspath(apk)
    name, ext = splitext(basename(apk))
    dir_name = dirname(abs_path)
    apk = '{}.{}'.format(apk, APK_EXT) if len(ext) == 0 else apk
    data = dir_name if args.dir else apk
    call([ADB, 'push', data, get_device_path(abs_path)])


def remount_as_root(args):
    call([ADB, 'root'])
    call([ADB, 'remount'])


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    subparsers.add_parser('root', help='adb root && adb remount').set_defaults(function=remount_as_root)
    subparsers.add_parser('rr', help='adb root && adb remount').set_defaults(function=remount_as_root)

    push_parser = subparsers.add_parser('push', help='Push an apk file to the device')
    push_parser.add_argument('apk', help='Name or path of an apk file')
    push_parser.add_argument('-d', '--dir', action='store_true', help='Push the whole directory')
    push_parser.set_defaults(function=push_apk)

    args = parser.parse_args()
    args.function(args)


if __name__ == "__main__":
    sys.exit(main())
